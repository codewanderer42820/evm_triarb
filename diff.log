diff --git a/QuantumQueue/queue.go b/QuantumQueue/queue.go
index ba2122a..f9fe6c2 100644
--- a/QuantumQueue/queue.go
+++ b/QuantumQueue/queue.go
@@ -70,8 +70,7 @@ const (
 	BucketCount = GroupCount * LaneCount * LaneCount // = 262,144
 
 	// CapItems = maximum number of queue entries that can be held concurrently.
-	// One node per tick is allowed.
-	CapItems = BucketCount
+	CapItems = 52428
 )
 
 // Handle is an opaque index into the node arena. Must remain within bounds [0, CapItems).
@@ -110,10 +109,11 @@ type node struct {
 // Used for O(1) traversal and hierarchy tracking of tick population.
 //
 //go:notinheap
-//go:align 576
+//go:align 64
 type groupBlock struct {
 	l1Summary uint64            // Summary of active lanes (1 bit per lane)
 	l2        [LaneCount]uint64 // Each lane has a 64-bit bitmap (1 bit per bucket)
+	_         [7]uint64
 }
 
 // -----------------------------------------------------------------------------
@@ -125,6 +125,7 @@ type groupBlock struct {
 // full responsibility on the caller for maintaining safety and correctness.
 //
 //go:notinheap
+//go:align 64
 type QuantumQueue struct {
 	arena   [CapItems]node         // Static storage for all possible entries
 	buckets [BucketCount]Handle    // Bucket array indexed by tick
diff --git a/dedupe.go b/dedupe.go
index 04386cc..b1e580a 100644
--- a/dedupe.go
+++ b/dedupe.go
@@ -14,15 +14,14 @@ import "main/utils"
 //   - blk, tx, log  → event coordinates
 //   - tagHi/Lo      → fingerprint of content (topic0 or data fallback)
 //   - age           → block height for staleness & reorg detection
+//
+//go:notinheap
+//go:align 64
 type dedupeSlot struct {
-	blk, tx, log uint32 // 96-bit composite key (log identity)
-	tagHi, tagLo uint64 // 128-bit fingerprint (topics or data)
-	age          uint32 // last seen block height for reorg-aware eviction
-
-	// Enforced alignment to 32B by adding padding (4B)
-	// Required to prevent false sharing / straddled slots on L1 cache lines.
-	//lint:ignore U1000 unused but required to avoid misalignment
-	_ uint32
+	blk, _, tx, _, log, _ uint32 // 96-bit composite key
+	tagHi, tagLo          uint64 // 128-bit fingerprint
+	age, _                uint32
+	_                     [2]uint64
 }
 
 // Deduper is a fixed-size ring buffer that stores recent event identities.
diff --git a/fastuni/fastuni.go b/fastuni/fastuni.go
index 55d55c3..3ccc929 100644
--- a/fastuni/fastuni.go
+++ b/fastuni/fastuni.go
@@ -54,6 +54,7 @@ const fracMask uint64 = (1<<52 - 1) // Mask to isolate 52-bit fraction
 // Used to hold fixed-point Q64.96 Uniswap-style prices.
 //
 //go:notinheap
+//go:align 64
 type Uint128 struct {
 	Hi uint64 // high 64 bits
 	Lo uint64 // low 64 bits
diff --git a/localidx/hash.go b/localidx/hash.go
index bdf4e45..68e9444 100644
--- a/localidx/hash.go
+++ b/localidx/hash.go
@@ -31,13 +31,14 @@ import "unsafe"
 // Package localidx implements a fixed-capacity Robin-Hood hashmap
 // optimized for single-threaded, nanosecond-class performance.
 // Zero heap pressure; insertion-only; no deletion logic.
-
-//go:notinheap         // avoids heap metadata, allows static arena use
-//go:align 64          // ensures alignment for cacheline locality
+//
+//go:notinheap
+//go:align 64
 type Hash struct {
-	keys []uint32 // key slots; key=0 denotes empty
-	vals []uint32 // corresponding values
-	mask uint32   // bitmask for modulo (len(keys)-1)
+	keys    []uint32 // key slots; key=0 denotes empty
+	vals    []uint32 // corresponding values
+	mask, _ uint32   // bitmask for modulo (len(keys)-1)
+	_       uint64
 }
 
 // nextPow2 returns the smallest power of two greater than or equal to n.
diff --git a/ring56/ring.go b/ring56/ring.go
index 3d99600..1ff3305 100644
--- a/ring56/ring.go
+++ b/ring56/ring.go
@@ -23,37 +23,36 @@ import (
 
 // slot holds one 56-byte payload and its sequence number for tracking ownership.
 //
-// Compiler directives:
-//   - notinheap: avoids GC tracking
-//   - align 64: ensures slot fits cleanly in cachelines for producer/consumer
-//
 //go:notinheap
 //go:align 64
 type slot struct {
 	val [56]byte
-	seq uint64
+	seq uint64 // total size: 64 bytes
 }
 
 // Ring is an ultra-fast, cache-friendly, single-producer single-consumer ring buffer.
 //
-// Compiler directives:
-//   - notinheap: ensures arena safety and zero GC metadata
-//   - align 64: maintains cacheline separation between head/tail
+// Layout ensures:
+// - `head` and `tail` each sit on separate 64-byte cachelines
+// - No false sharing across producer/consumer lanes
+// - struct size = 272 bytes (multiple of 64)
 //
 //go:notinheap
 //go:align 64
 type Ring struct {
-	_    [64]byte // consumer head cacheline
-	head uint64
+	_    [64]byte // bytes 0–63: pad to isolate head
+	head uint64   // bytes 64–71: read cursor (consumer)
+
+	_    [64]byte // bytes 72–135: pad to isolate tail
+	tail uint64   // bytes 136–143: write cursor (producer)
 
-	_    [64]byte // producer tail cacheline
-	tail uint64
+	_ [64]byte // bytes 144–207: additional separation or future metadata
 
-	_ [64]byte // extra padding
+	mask uint64 // bytes 208–215
+	step uint64 // bytes 216–223
+	buf  []slot // bytes 224–247 (slice header: ptr, len, cap)
 
-	mask uint64
-	step uint64
-	buf  []slot
+	_ [3]uint64 // bytes 248–271: align to 272 total
 }
 
 // New constructs a ring with power-of-two size.
diff --git a/ring56/ring_test.go b/ring56/ring_test.go
index 084cb02..42a1b78 100644
--- a/ring56/ring_test.go
+++ b/ring56/ring_test.go
@@ -151,8 +151,6 @@ func TestPushDropOnOverflow(t *testing.T) {
 	for i := 0; i < 8; i++ {
 		if !r.Push(val) {
 			drops++
-		} else {
-			_ = r.Pop()
 		}
 	}
 	if drops == 0 {
diff --git a/types/types.go b/types/types.go
index c90df9d..db946ea 100644
--- a/types/types.go
+++ b/types/types.go
@@ -14,6 +14,10 @@ package types
 //   - Hot path fields come first: address, data, topics
 //   - Numeric metadata fields follow (block/tx/log)
 //   - Cold dedup-only fingerprint fields are last
+//
+//go:notinheap
+//go:align 64
+//go:align 128
 type LogView struct {
 	// ───────────── Hot fields: accessed immediately in fast path ──────────────
 
